{"version":3,"sources":["logo.svg","helpers/dagre-utils.ts","store/ClusterDefinition.ts","store/ViewState.ts","store/Contexts.ts","components/DefinitionsEditor.tsx","components/DefinitionsGraph.tsx","components/GraphToolbar.tsx","components/Header.tsx","store/AppStateStore.tsx","containers/App.tsx","registerServiceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","size","height","width","distributeElements","model","clonedModel","_","nodes","map","node","id","metadata","Object","objectSpread","mapElements","edges","links","link","from","source","to","target","filter","item","find","mapEdges","graph","dagre","Graph","setGraph","rankdir","ranksep","setDefaultEdgeLabel","forEach","setNode","edge","setEdge","distributeGraph","modelNode","x","y","exchangeColor","queueColor","state","definition","bindings","exchanges","parameters","policies","queues","vhosts","isValid","validate","editor","data","value","createDefaultClusterDefinition","produce","draft","clusterDefinitionToDagModel","viewState","engine","exchangeNodes","queueNodes","nodeLinks","DiagramModel","b","currentVhost","vhost","length","result","current","idx","findIndex","destination","destinationType","destination_type","push","routingKeys","routing_key","deduplicateBindings","binding","inNode","inNodeName","outNodeName","concat","outNode","e","name","undefined","createNode","q","outPort","getOutPorts","addOutPort","inPort","getInPorts","addInPort","createLinkModel","setSourcePort","setTargetPort","showRoutingKeys","key","addLabel","outIndex","inOutIndex","addNode","index","nodeLink","addLink","distributedDiagram","serializeDiagram","deserializedModel","deSerializeDiagram","getDistributedModel","color","arguments","DefaultNodeModel","errors","selectVhost","evt","setZoomFunction","toggleShowRoutingKeys","zoomToFit","createDefaultViewState","ClusterDefinitionContext","React","ViewStateContext","require","DefinitionsEditor","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","code","_this2","setTimeout","setState","JSON","stringify","SampleDefinition","_this3","react","Consumer","clusterDefinition","react_codemirror2","options","lineNumbers","mode","theme","onChange","DefinitionsGraph","zoomFunctionSet","SRD","installDefaultFactories","renderDefinitionDiagram","renderMessageBox","Message","error","header","list","attached","icon","content","info","setDiagramModel","main","className","diagramEngine","inverseZoom","GraphToolbar","Menu","text","generateVhostOptions","Item","Dropdown","placeholder","selection","VHostMenu","Radio","toggle","label","checked","Button","onClick","Header","fixed","inverted","Container","fluid","as","Image","src","logo","style","marginRight","position","href","Icon","AppStateStore","validateDefinitionsJson","bind","assertThisInitialized","next","callback","Provider","children","valueJson","parse","sort","v1","v2","message","App","AppStateStore_AppStateStore","components_Header","Grid","centered","celled","Row","Column","padding","marginTop","marginBottom","components_GraphToolbar","components_DefinitionsGraph","components_DefinitionsEditor","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","containers_App","document","getElementById","URL","process","toString","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.18299808.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3938d65c.svg\";","// Based on: https://github.com/projectstorm/react-diagrams/blob/master/demos/demo-dagre/dagre-utils.ts\n\nimport * as dagre from \"dagre\";\nimport * as _ from \"lodash\";\n\nconst size = {\n\theight: 30,\n\twidth: 180\n};\n\nexport function distributeElements(model) {\n\tconst clonedModel = _.cloneDeep(model);\n\tconst nodes = distributeGraph(clonedModel);\n\tnodes.forEach(node => {\n\t\tconst modelNode = clonedModel.nodes.find(item => item.id === node.id);\n\t\tmodelNode.x = node.x;\n\t\tmodelNode.y = node.y;\n\t});\n\treturn clonedModel;\n}\n\nfunction distributeGraph(model) {\n\tconst nodes = mapElements(model);\n\tconst edges = mapEdges(model);\n\tconst graph = new dagre.graphlib.Graph();\n\tgraph.setGraph({ rankdir: \"LR\", ranksep: 100 });\n\tgraph.setDefaultEdgeLabel(() => ({}));\n\t// add elements to dagre graph\n\tnodes.forEach(node => {\n\t\tgraph.setNode(node.id, node.metadata);\n\t});\n\tedges.forEach(edge => {\n\t\tif (edge.from && edge.to) {\n\t\t\tgraph.setEdge(edge.from, edge.to);\n\t\t}\n\t});\n\t// auto-distribute\n\tdagre.layout(graph);\n\treturn graph.nodes().map(node => graph.node(node));\n}\n\nfunction mapElements(model) {\n\t// dagre compatible format\n\treturn model.nodes.map(node => ({ id: node.id, metadata: { ...size, id: node.id } }));\n}\n\nfunction mapEdges(model) {\n\t// returns links which connects nodes\n\t// we check are there both from and to nodes in the model. Sometimes links can be detached\n\treturn model.links\n\t\t.map(link => ({\n\t\t\tfrom: link.source,\n\t\t\tto: link.target\n\t\t}))\n\t\t.filter(\n\t\t\titem => model.nodes.find(node => node.id === item.from) && model.nodes.find(node => node.id === item.to)\n\t\t);\n}","import produce from 'immer';\nimport { IInstance } from 'react-codemirror2';\nimport { DefaultLinkModel, DefaultNodeModel, DiagramEngine, DiagramModel, LinkModel } from \"storm-react-diagrams\";\nimport { distributeElements } from \"../helpers/dagre-utils\";\nimport { IViewState } from \"./ViewState\";\n\nconst exchangeColor = \"rgb(0,192,255)\";\nconst queueColor = \"rgb(192,255,0)\";\n\nexport interface IVhost {\n  name: string;\n}\n\nexport interface IPolicy {\n  vhost: string;\n  name: string;\n  pattern: string;\n  \"apply-to\": string;\n  definition: { [parameter: string] : {value: any}};\n  priority: number;\n}\n\nexport interface IQueue {\n  name: string;\n  vhost: string;\n  durable: boolean;\n  auto_delete: boolean;\n  arguments: object;\n}\n\nexport interface IExchange {\n  name: string;\n  vhost: string;\n  type: string;\n  durable: boolean;\n  auto_delete: boolean;\n  internal: boolean;\n  arguments: object;\n}\n\nexport interface IBinding {\n  source: string;\n  vhost: string;\n  destination: string;\n  destination_type: string;\n  routing_key: string;\n  arguments: object;\n}\n\nexport interface IDefinition {\n  vhosts: IVhost[];\n  parameters: any[];\n  policies: IPolicy[];\n  queues: IQueue[];\n  exchanges: IExchange[];\n  bindings: IBinding[];\n}\n\nexport interface IClusterDefinition {\n  definition: IDefinition;\n\n  validate: (editor: IInstance, data: any, value: string) => void;\n  isValid: boolean;\n}\n\ninterface IBindingCollection {\n  source: string;\n  destination: string;\n  destinationType: string;\n  vhost: string;\n  routingKeys: string[];\n}\n\nconst state: IClusterDefinition = {\n  definition: {\n    bindings: [],\n    exchanges: [],      \n    parameters: [],\n    policies: [],\n    queues: [],\n    vhosts: []\n  },\n  isValid: true,\n  validate: (editor: IInstance, data: any, value: string) => null\n};\n\nexport function createDefaultClusterDefinition() : IClusterDefinition {\n  return produce<IClusterDefinition>(state, draft => {\n    draft.isValid = true;\n  });\n}\n\nexport function clusterDefinitionToDagModel(definition: IDefinition, viewState: IViewState, engine: DiagramEngine) : DiagramModel {\n  const exchangeNodes: DefaultNodeModel[] = [];\n  const queueNodes: DefaultNodeModel[] = [];\n  const nodeLinks: LinkModel[] = [];\n  const model = new DiagramModel();\n\n  const bindings = definition.bindings.filter(b => viewState.currentVhost === \"All\" || b.vhost === viewState.currentVhost);\n\n  const dedupedBindings = bindings.length > 0 ? deduplicateBindings(bindings) : [];\n\n  dedupedBindings.forEach(binding => {\n    const vhost = binding.vhost;\n    const outNodeName = `Exchange: ${binding.source} ${viewState.currentVhost === \"All\" ? `(${vhost})` : \"\"}`;\n    let outNode = exchangeNodes.find(e => e.name === outNodeName);\n\n    if(outNode === undefined) {\n      outNode = createNode(outNodeName, exchangeColor);\n      exchangeNodes.push(outNode);\n    }\n\n    let inNode: DefaultNodeModel | undefined;\n    let inNodeName: string;\n\n    if(binding.destinationType === \"queue\") {\n      inNodeName = `Queue: ${binding.destination} ${viewState.currentVhost === \"All\" ? `(${vhost})` : \"\"}`;\n      inNode = queueNodes.find(q => q.name === inNodeName);\n\n      if(inNode === undefined) {\n        inNode = createNode(inNodeName, queueColor);\n        queueNodes.push(inNode);\n      }\n    }\n    else {\n      inNodeName = `Exchange: ${binding.destination} ${viewState.currentVhost === \"All\" ? `(${vhost})` : \"\"}`;\n      inNode = exchangeNodes.find(q => q.name === inNodeName);\n\n      if(inNode === undefined) {\n        inNode = createNode(inNodeName, exchangeColor);\n        exchangeNodes.push(inNode);\n      }\n    }\n\n    const outPort = outNode.getOutPorts().length > 0 ? outNode.getOutPorts()[0] : outNode.addOutPort(\"Out\");\n    const inPort = inNode.getInPorts().length > 0 ? inNode.getInPorts()[0] : inNode.addInPort(\"In\");\n\n    const link = outPort.createLinkModel() as DefaultLinkModel;\n    link.setSourcePort(outPort);\n    link.setTargetPort(inPort);\n\n    if(viewState.showRoutingKeys) {\n      binding.routingKeys.forEach(key => link.addLabel(key));\n    }\n    \n    nodeLinks.push(link);\n  });\n\n  let outIndex = 1;\n  let inOutIndex = 1;\n\n  exchangeNodes.forEach(node => {\n    if(node.getInPorts().length > 0 && node.getOutPorts().length > 0){\n      node.x = 300;\n      node.y = inOutIndex * 70;\n      inOutIndex++; \n    }\n    else{\n      node.x = 70;\n      node.y = outIndex * 70;\n      outIndex++;\n    }\n    model.addNode(node);\n  });\n\n  queueNodes.forEach((node, index) => {\n    node.x = 530;\n    node.y = (index + 1) * 70;\n    model.addNode(node);\n  });\n\n  nodeLinks.forEach(nodeLink => {\n    model.addLink(nodeLink);\n  })\n\n  return getDistributedModel(engine, model);\n}\n\nfunction deduplicateBindings(bindings: IBinding[]) : IBindingCollection[] {\n  const result: IBindingCollection[] = [];\n\n  bindings.forEach(current => {\n    const idx = result.findIndex(b => {\n      return b.vhost === current.vhost && \n        b.source === current.source && \n        b.destination === current.destination &&\n        b.destinationType === current.destination_type;\n    });\n\n    if(idx === -1) {\n      result.push({\n        destination: current.destination,\n        destinationType: current.destination_type,\n        routingKeys: current.routing_key === \"\" ? [] : [current.routing_key],\n        source: current.source,\n        vhost: current.vhost\n      });\n    }\n    else {\n      if(current.routing_key !== \"\") {\n        result[idx].routingKeys.push(current.routing_key);\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createNode(name: string, color: string = \"rgb(0,192,255)\") : DefaultNodeModel {\n\treturn new DefaultNodeModel(name, color);\n}\n\nfunction getDistributedModel(engine: DiagramEngine, model: DiagramModel) : DiagramModel {\n  const distributedDiagram = distributeElements(model.serializeDiagram());\n\n  const deserializedModel = new DiagramModel();\n  deserializedModel.deSerializeDiagram(distributedDiagram, engine);\n  return deserializedModel;\n}","import produce from 'immer';\n\nexport interface IViewState {\n  readonly currentVhost: string;\n  readonly errors: string[];\n  readonly showRoutingKeys: boolean;\n  selectVhost(evt, data): void;\n  setZoomFunction(callback: () => void): void;\n  toggleShowRoutingKeys(): void;\n  zoomToFit(): void;\n}\n\nconst state: IViewState = {\n  currentVhost: \"\",\n  errors: [],\n  selectVhost: (evt, data) => null,\n  setZoomFunction: () => null,\n  showRoutingKeys: true,\n  toggleShowRoutingKeys: () => null,\n  zoomToFit: () => null\n};\n\nexport function createDefaultViewState() : IViewState {\n  return produce<IViewState>(state, draft => {\n    draft.currentVhost = \"All\";\n  });\n}","import * as React from 'react';\n\nimport { createDefaultClusterDefinition, IClusterDefinition } from '../store/ClusterDefinition';\nimport { createDefaultViewState, IViewState } from '../store/ViewState';\n\nexport const ClusterDefinitionContext = React.createContext<IClusterDefinition>(createDefaultClusterDefinition());\n\nexport const ViewStateContext = React.createContext<IViewState>(createDefaultViewState());","import * as React from 'react';\nimport { UnControlled as CodeMirror } from 'react-codemirror2';\n\nimport { ClusterDefinitionContext } from '../store/Contexts';\nimport SampleDefinition from '../data/sampleDefinition.json';\n\n// tslint:disable-next-line:no-var-requires\nrequire('codemirror/mode/javascript/javascript');\n\ninterface IEditorState {\n  code: string\n}\n\nclass DefinitionsEditor extends React.Component<{}, IEditorState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      code: \"\"\n    };\n  }\n\n  public componentDidMount() {\n    // short delay to allow other components to fully render\n    // before setting sample definition\n    setTimeout(() => {\n      this.setState({\n        code: JSON.stringify(SampleDefinition, null, 2)\n      });\n    }, 50);\n  }\n\n  public render() {\n    return (\n      <ClusterDefinitionContext.Consumer>\n        {clusterDefinition => (\n          <CodeMirror \n            value={this.state.code}\n            options={{\n              lineNumbers: true,\n              mode: 'application/json',\n              theme: 'material'\n            }}\n            onChange={clusterDefinition.validate} />\n        )}\n      </ClusterDefinitionContext.Consumer>\n    );\n  }\n}\n\nexport default DefinitionsEditor;","import * as React from 'react';\nimport { Message } from 'semantic-ui-react';\nimport * as SRD from 'storm-react-diagrams';\nimport 'storm-react-diagrams/dist/style.min.css';\n\nimport { clusterDefinitionToDagModel, IClusterDefinition } from '../store/ClusterDefinition';\nimport { ClusterDefinitionContext, ViewStateContext } from '../store/Contexts';\nimport { IViewState } from '../store/ViewState';\n\nclass DefinitionsGraph extends React.Component {\n  private engine: SRD.DiagramEngine;\n  private zoomFunctionSet: boolean;\n\n  constructor(props) {\n    super(props);\n\n    this.engine = new SRD.DiagramEngine();\n    this.engine.installDefaultFactories();\n    this.zoomFunctionSet = false;\n  }\n\n  public render() {\n    return (\n      <ViewStateContext.Consumer>\n        {viewState => (\n          <ClusterDefinitionContext.Consumer>\n            {clusterDefinition => \n              clusterDefinition.definition.vhosts.length > 0 ? \n                this.renderDefinitionDiagram(clusterDefinition, viewState) : this.renderMessageBox(viewState)                \n            }\n          </ClusterDefinitionContext.Consumer>          \n        )}\n      </ViewStateContext.Consumer>\n    )\n  }\n\n  private renderMessageBox(viewState: IViewState) {\n    const engine = new SRD.DiagramEngine();\n    engine.installDefaultFactories();\n    \n    if(viewState.errors.length > 0) {\n      return (\n        <Message\n          error={true}\n          header=\"Invalid broker definition json\"\n          list={viewState.errors}\n          attached=\"top\"\n          icon=\"exclamation circle\" />\n      );\n    }\n\n    return (\n      <Message \n        content=\"Please load a broker definition using the editor panel.\"\n        header=\"No Broker Definition Present\"\n        info={true}\n        attached=\"top\"\n        icon=\"info circle\" />\n    );\n  }\n\n  private renderDefinitionDiagram(clusterDefinition: IClusterDefinition, viewState: IViewState) {\n    const model = clusterDefinitionToDagModel(clusterDefinition.definition, viewState, this.engine);\n    this.engine.setDiagramModel(model);\n\n    if(!this.zoomFunctionSet) {\n      viewState.setZoomFunction(() => {\n        this.engine.zoomToFit();\n      });\n      this.zoomFunctionSet = true;\n    }\n\n    return <SRD.DiagramWidget \n              className=\"srd-canvas\" \n              diagramEngine={this.engine} \n              inverseZoom={true} />;\n  }\n}\n\nexport default DefinitionsGraph;","import * as React from 'react';\nimport { Button, Dropdown, Menu, Radio } from 'semantic-ui-react';\nimport { IVhost } from '../store/ClusterDefinition';\nimport { ClusterDefinitionContext, ViewStateContext } from '../store/Contexts';\n\nconst GraphToolbar = () => (\n  <ViewStateContext.Consumer>\n    {viewState => (\n      <ClusterDefinitionContext.Consumer>\n        {clusterDefinition => (\n          clusterDefinition.definition.vhosts.length > 0 ? (\n            <Menu attached=\"top\">\n              {VHostMenu(clusterDefinition.definition.vhosts, viewState.currentVhost, viewState.selectVhost)}      \n              <Menu.Item>              \n                <Radio \n                  toggle={true} \n                  label=\"Show Routing Keys\"\n                  onChange={viewState.toggleShowRoutingKeys}\n                  checked={viewState.showRoutingKeys} />\n              </Menu.Item>\n              <Menu.Item>\n                <Button \n                  onClick={viewState.zoomToFit} \n                  content=\"Zoom to Fit\" />\n              </Menu.Item>\n            </Menu>\n          ) : \"\" \n        )}\n      </ClusterDefinitionContext.Consumer>\n    )}\n  </ViewStateContext.Consumer>\n);\n\nfunction VHostMenu(vhosts: IVhost[], currentVhost: string, onChange: (evt, data) => void) {\n  const options = generateVhostOptions(vhosts);\n\n  return (\n    <Menu.Item>\n      Virtual Host:&nbsp;              \n      <Dropdown \n        placeholder=\"Virtual Hosts\" \n        value={currentVhost} \n        selection={true} \n        options={options} \n        onChange={onChange} />\n    </Menu.Item>\n  );\n}\n\nfunction generateVhostOptions(vhosts: IVhost[]) {\n  const options = [{ key: \"All\", value: \"All\", text: \"All\"}];\n\n  vhosts.forEach(vhost => options.push({key: vhost.name, value: vhost.name, text: vhost.name}));\n\n  return options;\n}\n\nexport default GraphToolbar;","import * as React from 'react';\nimport { Container, Icon, Image, Menu } from 'semantic-ui-react';\nimport logo from '../logo.svg';\n\nclass Header extends React.Component {\n  public render() {\n    return (\n      <Menu fixed=\"top\" inverted={true}>\n        <Container fluid={true}>\n          <Menu.Item header={true} as=\"h4\">\n            <Image size=\"mini\" src={logo} style={{ marginRight: '1.5em' }} />\n            Rabbit Viz\n          </Menu.Item>\n          <Menu.Item position=\"right\" href=\"https://github.com/plexsystems/rabbit-viz\" target=\"_blank\">\n            <Icon name=\"github\" size=\"big\" />\n            Fork us on GitHub!\n          </Menu.Item>\n        </Container>\n      </Menu>\n    );\n  }\n}\n\nexport default Header;","import produce from 'immer';\nimport * as React from 'react';\nimport { IInstance } from 'react-codemirror2';\nimport { createDefaultClusterDefinition, IClusterDefinition, IDefinition } from './ClusterDefinition';\nimport { ClusterDefinitionContext, ViewStateContext } from './Contexts';\nimport { createDefaultViewState, IViewState } from './ViewState';\n\ninterface IAppState {\n  clusterDefinition: IClusterDefinition,\n  viewState: IViewState\n}\n\nexport default class AppStateStore extends React.Component<{}, IAppState> {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      clusterDefinition: produce<IClusterDefinition>(createDefaultClusterDefinition(), draft => {\n        draft.validate = this.validateDefinitionsJson.bind(this)\n      }),\n      viewState: produce<IViewState>(createDefaultViewState(), draft => {\n        draft.selectVhost = (evt, data) => {\n          this.setState(produce<IAppState>(next => {\n            next.viewState.currentVhost = data.value;\n          }));\n        };\n\n        draft.setZoomFunction = (callback: () => void) => {\n          this.setState(produce<IAppState>(next => {\n            next.viewState.zoomToFit = callback;\n          }));\n        };\n\n        draft.toggleShowRoutingKeys = () => {\n          this.setState(produce<IAppState>(next => {\n            next.viewState.showRoutingKeys = !next.viewState.showRoutingKeys;\n          }));\n        };\n      })\n    }\n  }\n\n  public render(){\n    return (\n      <ViewStateContext.Provider value={this.state.viewState}>\n        <ClusterDefinitionContext.Provider value={this.state.clusterDefinition}>\n          {this.props.children}\n        </ClusterDefinitionContext.Provider>\n      </ViewStateContext.Provider>\n    );\n  }\n\n  private validateDefinitionsJson(editor: IInstance, data: any, value: string) {\n    if(value.length > 0) {\n       try {\n        const valueJson = JSON.parse(value);\n\n        valueJson.vhosts = valueJson.vhosts.sort((v1, v2) => {\n          if (v1.name > v2.name) { return 1; }\n          if (v1.name < v2.name) { return -1; }\n          return 0;\n        });\n\n        this.setState(produce<IAppState>(draft => {\n          draft.clusterDefinition.isValid = true;\n          draft.viewState.errors = [];\n          draft.clusterDefinition.definition = valueJson as IDefinition;\n        }));\n      } catch (error) {\n        this.setState(produce<IAppState>(draft => {\n          draft.clusterDefinition.isValid = false;\n          draft.viewState.errors = [(error as Error).message];\n          draft.clusterDefinition.definition = {\n            bindings: [],\n            exchanges: [],      \n            parameters: [],\n            policies: [],\n            queues: [],\n            vhosts: []\n          };\n        }));\n        return;\n      }\n    }\n    else {\n      this.setState(produce<IAppState>(draft => {\n        draft.clusterDefinition.isValid = true;\n        draft.viewState.errors = [];\n        draft.clusterDefinition.definition = {\n          bindings: [],\n          exchanges: [],      \n          parameters: [],\n          policies: [],\n          queues: [],\n          vhosts: []\n        };\n      }));\n    }\n  }\n}","import * as React from 'react';\nimport { Container, Grid, Menu } from 'semantic-ui-react';\n\nimport DefinitionsEditor from '../components/DefinitionsEditor';\nimport DefinitionsGraph from '../components/DefinitionsGraph';\nimport GraphToolbar from '../components/GraphToolbar';\nimport Header from '../components/Header';\nimport AppStateStore from '../store/AppStateStore';\n\nconst App = () => (\n  <AppStateStore>\n    <Header />\n    <Container fluid={true}>\n      <Grid style={{height: '100vh'}} centered={true} celled=\"internally\">\n        <Grid.Row style={{ height: '100%' }}>\n          <Grid.Column width={12} style={{ padding: 0, marginTop: '4.5em', marginBottom: '2.5em'}} className=\"srd-container\">\n            <GraphToolbar />\n            <DefinitionsGraph />\n          </Grid.Column>\n          <Grid.Column width={4} style={{ padding: 0, marginTop: '4.5em', marginBottom: '2.5em'}}>\n            <DefinitionsEditor />\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Container>\n    <Menu fixed=\"bottom\" inverted={true}>\n      <Menu.Item header={true} position=\"right\">\n        © 2019 Plex Systems, Inc. All Rights Reserved.\n      </Menu.Item>          \n    </Menu>\n  </AppStateStore>\n);\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport 'codemirror/theme/material.css';\n\nimport App from './containers/App';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}